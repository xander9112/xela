import 'dart:io';
import 'package:mason/mason.dart';
import 'package:path/path.dart' as p;
import './utils.dart';

void run(HookContext context) async {
  await _installPackage(context);
  await _runBuild(context);
}

List<String> _addPackageBrick() => [
      'add',
      'xela_feature',
      '--git-url',
      'https://github.com/xander9112/xela',
      '--git-path',
      'xela_feature'
    ];

Future<void> _installPackage(HookContext context) async {
  final name = context.vars['name'] as String;
  final isMultiple = context.vars['isMultiple'] as bool? ?? false;

  String installPath = p.join(name, 'lib');

  if (isMultiple) {
    installPath = p.join(name, 'lib', 'core');
  }

  // -o modules/my_settings/lib/core

  successMessage(context, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç');

  await Process.run('mason', _addPackageBrick()).onError(
    (error, stackTrace) {
      print('_addMasonBrick error: ${error.toString()}');

      errMessage(
          context, '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç: ${error.toString()}');

      return ProcessResult(pid, exitCode, stdout, stderr);
    },
  );

  final List<String> commands = [
    'make',
    'xela_feature',
    '--name',
    name,
    '--useDI',
    'true',
    '--buildAfterInstall',
    'true',
    '-o',
    installPath,
    '--on-conflict',
    'overwrite',
  ];

  successMessage(
      context, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ $name –≤ $installPath: ${commands.join(' ')}');

  // await backupAndRestore(
  //   context,
  //   name: name,
  //   outputDir: outputDir,
  //   action: () => Process.run('mason', commands).onError(
  //     (error, stackTrace) {
  //       errMessage(context,
  //           '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ $name –≤ $installPath: ${error.toString()}');

  //       return ProcessResult(pid, exitCode, stdout, stderr);
  //     },
  //   ),
  // );

  Process.run('mason', commands).onError(
    (error, stackTrace) {
      errMessage(context,
          '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ $name –≤ $installPath: ${error.toString()}');

      return ProcessResult(pid, exitCode, stdout, stderr);
    },
  );
}

Future<void> _runBuild(HookContext context) async {
  final progress = context.logger.progress('Build');

  final List<String> commands = [
    'exec',
    '--scope',
    '${toSnakeCase(context.vars['name'].toString())}',
    '--',
    'dart',
    'run',
    'build_runner',
    'build',
    '-d',
  ];

  await Process.run('melos', commands).onError(
    (error, stackTrace) {
      errMessage(context, error.toString());

      return ProcessResult(pid, exitCode, stdout, stderr);
    },
  );

  progress.complete();
}

Future<void> backupAndRestore(
  HookContext context, {
  required String name,
  required Directory outputDir,
  required Future<ProcessResult> Function() action,
}) async {
  final originalFile = File(p.join(outputDir.path, name, 'lib', '$name.dart'));
  final backupFile = File('${originalFile.path}.backup');

  // 1. –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
  if (!await originalFile.exists()) {
    throw Exception('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${originalFile.path}');
  }

  // 2. –°–∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  await originalFile.copy(backupFile.path);
  successMessage(context, '–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π: ${backupFile.path}');

  // 3. –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω—É–∂–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
  final result = await action(); // –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–≤–æ—é –∫–æ–º–∞–Ω–¥—É

  if (result.exitCode != 0) {
    errMessage(context, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: ${result.stderr}');
  } else {
    successMessage(context, '‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${result.stdout}');
  }

  // 4. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
  if (await originalFile.exists()) {
    await originalFile.delete();
  }
  await backupFile.rename(originalFile.path);
  successMessage(context, 'üîÑ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: ${originalFile.path}');
}
